/*


Shin Nagai

*/

#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define flush fflush(stdin)
#define cls system ("cls")
#define pause system ("pause")
#define SIZE 20

typedef struct{

	//int MNT;//Maintenance fee (monthly)
	int roomNum; //fro room number
	int rent;
	int closeSell;
	//int day;
	//int month;
	//int year;
	//int capitalRate;
	//int cashFlow;
	//int ANOI;//annual net operating income 

} LISTINFO; //This is for indivisual room

typedef struct{

	LISTINFO *listings;//struct inside of a struct

	int keepCount;

} APTINFO;

//function prote type
int displayMainMenu();
void enterDate(APTINFO aptInfo[],APTINFO houseInfo[],int *aptCount, int *houseCount,char nameA[20][20],char nameH[20][20],
	int *flagApt,int *flagHouse);
void Apt(APTINFO aptInfo[],int *aptCount,char nameA[20][20],int *flagApt);
void display(APTINFO aptInfo[],APTINFO houseInfo[],int aptCount, int houseCount,char nameA[20][20],char nameH[20][20],int flagApt, 
	int flagHouse,int rent[100],int close[100]);
void displayApt(APTINFO aptInfo[],int aptCount,char nameA[20][20],int flagApt,int rent[100],int close[100]);
void aptCulc(APTINFO aptInfo[],int aptCount,int rent[100],int close[100],int *rentAve,int *closeAve);
void addApt(char nameA[20][20],APTINFO aptInfo[],int aptCount,int flagApt);
void displayEeachApt(char nameA[20][20],APTINFO aptInfo[],int aptCount,int flagApt);
void changeRate(double *inflation,APTINFO aptInfo[],APTINFO houseInfo[],int aptCount,int houseCount,double *inflationRate,int *flag2,int flagApt);
void cahngeInflation(double *inflation,APTINFO aptInfo[],APTINFO houseInfo[],int aptCount,int houseCount,double *getInflation,double *inflationRate,int *flag2);
void sort(APTINFO aptInfo[],int *aptCount,char nameA[20][20],int rent[100],int close[100]);
void rentSort(APTINFO aptInfo[], int *aptCount,char nameA[20][20],int rent[100],int close[100]);
void closeSort(APTINFO aptInfo[], int *aptCount,char nameA[20][20],int rent[100],int close[100]);
FILE *fp; // global file pointer. it reachs any functions


main(){
	int choice=0,i,aptCount=0,houseCount=0;
	int Num=20;
	int rent[100],close[100];
	char nameA[20][20]={"\0"}; //for store apt names 
	char nameH[20][20]={"\0"}; //for store house names
	int flagApt=0,flagHouse=0;
	double inflation=0.0;
	double inflationRate=0.0;
	int flag2=0;
	int readAptKC=0,readAptCount=0;

	APTINFO aptInfo[200];  APTINFO houseInfo[200];

	aptInfo[0].listings = calloc(5, sizeof(LISTINFO));

	
	for(i=0;i<200;i++){//access to ALL 20 arrays 
		// aptInfo[i].aptName[i]='\0';        houseInfo[i].aptName[i]='\0';
		//aptInfo[i].day=0;                  houseInfo[i].day=0;
		//aptInfo[i].month=0;                houseInfo[i].month=0;
		//aptInfo[i].year=0;                 houseInfo[i].year=0;
		//aptInfo[i].rent=0;                 houseInfo[i].rent=0;
		//aptInfo[i].closeSell=0;            houseInfo[i].closeSell=0;
		//aptInfo[i].capitalRate=0;          houseInfo[i].capitalRate=0;
		//aptInfo[i].cashFlow=0;             houseInfo[i].cashFlow=0;
		//aptInfo[i].ANOI=0;                 houseInfo[i].ANOI=0;
		aptInfo[i].keepCount=0;            houseInfo[i].keepCount=0;
		//aptInfo[i].MNT=0;                  houseInfo[i].MNT=0;
		//aptInfo[i].roomNum=0;              houseInfo[i].roomNum=0;
	}//end of for 

	
	do{
		cls;
		choice=displayMainMenu();

		switch(choice){

		case 1:
			enterDate(aptInfo,houseInfo,&aptCount,&houseCount,nameA,nameH,&flagApt,&flagHouse);
			pause;
			break;
		case 3:
			changeRate(&inflation,aptInfo,houseInfo,aptCount,houseCount,&inflationRate,&flag2,flagApt);
			pause;
			break;
		case 2:
			display(aptInfo,houseInfo,aptCount,houseCount,nameA,nameH,flagApt,flagHouse,rent,close);
			pause;
			break;
		case 4:
			sort(aptInfo,&aptCount,nameA,rent ,close);
			pause;
			break;
		case 5:
			printf("\n\n	see you ");
			pause;
			break;
		}//end of switch 

	}while(choice != 6);

}//end of main

int displayMainMenu(){
	int result = 0, i =0, j =0;
	char menuArray[4][80] = {'/0'};

	for (j=0; j<3; j++)
	{
		for (i=0; i<35; i++)
		{
			menuArray[j][i]= 205;
		}//end inside for loop
	}//end outside for loop

	menuArray[0][0]= 201;
	menuArray[0][35]= 187;
	menuArray[1][0]=204;
	menuArray[1][35]=185;
	menuArray[2][0]= 200;
	menuArray[2][35]=188;
	menuArray[3][0]=186;

	cls;
	printf("\t\t        REAL ESTATE DATEBASE\n\n");
	printf("\t\t%s\n", menuArray[0]);
	printf("\t\t%c             MAIN MENU            %c\n", menuArray[3][0], menuArray[3][0]);
	printf("\t\t%s\n", menuArray[1]);
	printf("\t\t%c1)  Enter Apt info                %c\n", menuArray[3][0], menuArray[3][0]);
	printf("\t\t%c2)  Display                       %c\n", menuArray[3][0], menuArray[3][0]);
	printf("\t\t%c3)  Apply/Change the rating       %c\n", menuArray[3][0], menuArray[3][0]);
	printf("\t\t%c4)  Search                        %c\n", menuArray[3][0], menuArray[3][0]);
	printf("\t\t%c5)  Quit                          %c\n", menuArray[3][0], menuArray[3][0]);
	printf("\t\t%s\n", menuArray[2]);
	printf("\n\t\tEnter a choice :");
	scanf("%i", &result);
	flush;
	cls;

	return result;
}//end main menu

void enterDate(APTINFO aptInfo[],APTINFO houseInfo[],int *aptCount, int *houseCount,char nameA[20][20],char nameH[20][20],int *flagApt,int *flagHouse){
	int choice=0;

	int result = 0, i =0, j =0;
	char menuArray[4][80] = {'/0'};

	for (j=0; j<3; j++)
	{
		for (i=0; i<35; i++)
		{
			menuArray[j][i]= 205;
		}//end inside for loop
	}//end outside for loop
	menuArray[0][0]= 213;
	menuArray[0][35]= 184;
	menuArray[1][0]=198;
	menuArray[1][35]=181;
	menuArray[2][0]= 212;
	menuArray[2][35]=190;
	menuArray[3][0]=179;
	cls;
	printf("\t\t%s\n", menuArray[0]);
	printf("\t\t%c1)  Create New Apt Info           %c\n", menuArray[3][0], menuArray[3][0]);
	printf("\t\t%c2)  Add Apt Info                  %c\n", menuArray[3][0], menuArray[3][0]);
	printf("\t\t%s\n", menuArray[2]);
	printf("\n\t\tEnter a Choice :");
	scanf("%i",&choice);
	flush;
	switch(choice){
	case 1:
		Apt(aptInfo,aptCount,nameA,flagApt);
		pause;
		break;
	case 2:
		addApt(nameA,aptInfo,*aptCount,*flagApt);//flag need to be pointer
		pause;
		break;

	}//end of switch

}//end of enterDate

void Apt(APTINFO aptInfo[],int *aptCount,char nameA[20][20],int *flagApt){
	int num1=0,i;

	cls;
	printf("Enter Apartment name :");
	scanf("%s",nameA[*aptCount]);
	printf("How many properties of the APT %s would you like to enter?   :",nameA[*aptCount]);
	scanf("%i",&num1);

	aptInfo[*aptCount].listings = (LISTINFO *)calloc(num1,sizeof(LISTINFO)); //calloc will be allocated memory by user input

	if(aptInfo == NULL){
		printf("Out Of Memories\n");
		exit(-1);
	}//end of if

	//aptinfo[*aptCount] Apt itself 
	//listings[listCount] listCount for indivisual rooms.listCount is determined by user Input
	//aptInfo[*aptCount].listings[listCount].roomNum

	for(i=0;i<num1;i++){

		printf("%i/%i\n",i+1,num1);
		printf("	Enter room number :");
		scanf("%i",&aptInfo[*aptCount].listings[i].roomNum);
		flush;
		//printf(" address is %x\n",&aptInfo[*aptCount].listings->roomNum);
		printf("	Enter the rent of %s room %i :$",nameA[*aptCount],aptInfo[*aptCount].listings[i].roomNum);
		scanf("%i",&aptInfo[*aptCount].listings[i].rent);
		flush;
		printf("	Enter close sell of the Apt %s :$",nameA[*aptCount]);
		scanf("%i",&aptInfo[*aptCount].listings[i].closeSell);
		flush;

	}//end of for

	aptInfo[*aptCount].keepCount=num1;//store the number of num1;

	*flagApt = 1;
	(*aptCount)++;//counter for apt is incremented by 1
}//Apt

void aptCulc(APTINFO aptInfo[],int aptCount,int rent[100],int close[100],int *rentAve,int *closeAve){

	/*int capitalRate;
	int cashFlow;
	int ANOI;//annual net operating income  */
	int num=0,count=0;
	int i,j;
	int rentTotal=0;
	int closeTotal=0;

	num=aptInfo[aptCount].keepCount;

	aptInfo[aptCount].listings[count].closeSell;

	for(i=0;i<aptCount;i++){
		for(j=0;j<aptInfo[i].keepCount;j++){
			rentTotal= rentTotal+aptInfo[i].listings[j].rent;
			closeTotal=closeTotal+aptInfo[i].listings[j].closeSell;
			count++;
		}//end of for 
	}//end of for 

	*rentAve=rentTotal/count;
	*closeAve=closeTotal/count;

	count=0;
	for(i=0;i<aptCount;i++){
		for(j=0;j<aptInfo[i].keepCount;j++){
			rent[count]=aptInfo[i].listings[j].rent-*rentAve;
			close[count]=aptInfo[i].listings[j].closeSell-*closeAve;
			count++;
		}//end of for 
	}//end of for 
	/*for(i=0;i<count;i++){
	printf("rent + - is %i\n",rent[i]);
	}
	for(i=0;i<count;i++){
	printf("close Sell is  + - is %i\n",close[i]);
	}
	*/

}//end of calc

void display(APTINFO aptInfo[],APTINFO houseInfo[],int aptCount, int houseCount,char nameA[20][20],char nameH[20][20],int flagApt, int flagHouse,int rent[100],int close[100]){

	int choice;
	int result = 0, i =0, j =0;
	char menuArray[4][80] = {'/0'};

	for (j=0; j<3; j++)
	{
		for (i=0; i<35; i++)
		{
			menuArray[j][i]= 205;
		}//end inside for loop
	}//end outside for loop
	menuArray[0][0]= 213;
	menuArray[0][35]= 184;
	menuArray[1][0]=198;
	menuArray[1][35]=181;
	menuArray[2][0]= 212;
	menuArray[2][35]=190;
	menuArray[3][0]=179;
	cls;
	printf("\t\t%s\n", menuArray[0]);
	printf("\t\t%c1)  See Each Apt Info             %c\n", menuArray[3][0], menuArray[3][0]);
	printf("\t\t%c2)  See All Apt  Info             %c\n", menuArray[3][0], menuArray[3][0]);
	printf("\t\t%s\n", menuArray[2]);
	printf("\n\t\tEnter a Choice :");
	scanf("%i",&choice);

	switch(choice){
	case 2:
		displayApt(aptInfo,aptCount,nameA,flagApt,rent,close);
		flush;
		break;
	case 1:
		displayEeachApt(nameA,aptInfo,aptCount,flagApt);
		break;
	}//end of switch

}//end of display

void displayApt(APTINFO aptInfo[],int aptCount,char nameA[20][20],int flagApt, int rent[100],int close[100]){

	int i,j,xa=0;
	int result = 0, p =0, y=0;
	char menuArray[4][80] = {'/0'};
	//int rent[100],close[100]; //this is a local variable
	int rentAve=0;
	int closeAve=0;

	for (y=0; y<3; y++)
	{
		for (p=0; p<70; p++)
		{
			menuArray[y][p]= 205;
		}//end inside for loop
	}//end outside for loop
	menuArray[0][0]= 213;
	menuArray[0][70]= 184;
	menuArray[1][0]=198;
	menuArray[1][70]=181;
	menuArray[2][0]= 212;
	menuArray[2][70]=190;
	menuArray[3][0]=179;
	menuArray[0][10]=209;
	menuArray[0][20]=209;
	menuArray[0][30]=209;
	menuArray[0][40]=209;
	menuArray[0][50]=209;
	menuArray[0][60]=209;
	menuArray[1][10]=179;
	menuArray[1][20]=179;
	menuArray[1][30]=179;
	menuArray[1][40]=179;
	menuArray[1][50]=179;
	menuArray[1][60]=179;
	menuArray[1][70]=179;
	menuArray[2][10]=207;
	menuArray[2][20]=207;
	menuArray[2][30]=207;
	menuArray[2][40]=207;
	menuArray[2][50]=207;
	menuArray[2][60]=207;
	menuArray[2][70]=207;

	if(flagApt==0){
		cls;
		printf("	Enter User Input first\n");
	}//end of if 

	else{
		cls;
		// go to the another function 
		aptCulc(aptInfo,aptCount,rent,close,&rentAve,&closeAve); // all the math will be done here

		printf("RENT+/- shows each rent is how much more expensive (+) or cheaper(-)  \n");
		printf("from the Average rent of all\n\n");
		printf("Clse+/- shows each close Sell is how much more expensive (+) or cheaper(-)\n");
		printf("from the Average close sell of all\n\n\n");
		printf("+++  Averae rent of all is %i +++\n",rentAve);
		printf("+++  Average close sell of all is %i +++\n\n",closeAve);
		printf("%s\n", menuArray[0]);
		printf("%cAPT\t  %c   ROOM  %c\tRENT  %c\t   CS   %cRENT+/-  %c Clse+/- %c  word3  %c\n",menuArray[1][10],menuArray[1][20],menuArray[1][30],
			menuArray[1][40],menuArray[1][50],menuArray[1][60],menuArray[1][70],menuArray[1][0]);
		printf("%s\n", menuArray[2]);
		for(i=0;i<aptCount;i++){
			for(j=0;j<aptInfo[i].keepCount;j++){
				printf("%c%s\t  %c%i\t    %c$%i     %c$%i\t %i\t\t%i\n",menuArray[1][10],nameA[i],menuArray[1][10],aptInfo[i].listings[j].roomNum,menuArray[1][10],aptInfo[i].listings[j].rent,
					menuArray[1][10],aptInfo[i].listings[j].closeSell,rent[xa],close[xa]);
				xa++;//count for rent[] and close[]
			}//end of for
		}//end of outer for

	}//end of big else
	flush;
}//end of display

void addApt(char nameA[20][20],APTINFO aptInfo[],int aptCount,int flagApt){

	int i,num1=0,add=0,getKeep=0,total=0;
	int a=0;

	LISTINFO *temp; //LISTINFO *temp = calloc(getKeep, sizeof(LISTINFO));


	if(flagApt == 0){
		cls;
		printf("	Enter User Input first\n");
	}//end of if 

	else{
		cls;
		for(i=0;i<aptCount;i++){
			printf("%i.%s\n",i+1,nameA[i]);
		}//end of for 

		printf("Enter a number that you want to add on ");
		scanf("%i",&num1);
		flush;
		if(num1>aptCount){
			printf("Invalid input. Please choose again\n");
			do{
				cls;
				for(i=0;i<aptCount;i++){
					printf("%i.%s\n",i+1,nameA[i]);
				}//end of for 

				printf("Enter a number that you want to add on ");
				scanf("%i",&num1);
				flush;
			}while(num1>aptCount);
		}//end of if 

		a=num1-1;//num1-1

		printf("How many properties of the APT %s would you like to enter?   : ",nameA[a]);
		scanf("%i",&add);
		flush;
		getKeep=aptInfo[a].keepCount;

		total=getKeep+add;

		temp = (LISTINFO*)calloc(getKeep, sizeof(LISTINFO));//create temp place to store

		aptInfo[a].keepCount=total; //reassign aptInfo[a].keepCount

		for(i=0;i<getKeep;i++){ //copying memories into tempStore...

			temp[i].roomNum=aptInfo[a].listings[i].roomNum;
			temp[i].rent=aptInfo[a].listings[i].rent;
			temp[i].closeSell=aptInfo[a].listings[i].rent;

		}//end of for 

		aptInfo[a].listings = (LISTINFO*)calloc(total,sizeof(APTINFO)); //re-allocate the memory 

		for(i=0;i<add;i++){ //adding new info on top of the new array...

			printf("%i/%i\n",i+1,add);
			printf(" Enter room number :");
			scanf("%i",&aptInfo[a].listings[i].roomNum);
			flush;
			printf(" Enter the rent of %s room %i :$ ",nameA[a],aptInfo[a].listings[i].roomNum);
			scanf("%i",&aptInfo[a].listings[i].rent); 
			flush;
			printf(" Enter close sell of the Apt %s :$",nameA[a]);
			scanf("%i",&aptInfo[a].listings[i].closeSell);
			flush;

		}//end of for

		i=0;
		for(add;add<total;add++){ //getting previous memories from temoStore

			aptInfo[a].listings[add].roomNum=temp[i].roomNum;
			aptInfo[a].listings[add].rent=temp[i].rent;
			aptInfo[a].listings[add].closeSell=temp[i].closeSell;
			i++;

		}//end of for
	}//end of big else
}//end of addApt

void displayEeachApt(char nameA[20][20],APTINFO aptInfo[],int aptCount,int flagApt){

	int i,count=0,num1=0;
	int getNum=0;
	int rentAve=0,aveTotal=0;
	int closeAve=0, closeTotal=0;
	int rent[100],close[100];
	int rentAverageF=0,closeAverageF=0;
	int xa=0;
	if(flagApt == 0){
		cls;
		printf("	Please Enter Apt info First\n\n");
	}//end of if

	else{
		cls;
		for(i=0;i<aptCount;i++){
			printf("%i. %s\n",i+1,nameA[i]);
		}//end of for 

		printf("\nEnter an Apartment Number that you like to see :");
		scanf("%i",&num1);
		flush;
		if(num1>aptCount){
			do{
				cls;
				printf("++		Invalid Input		++\n");
				printf("++		Please Try again	++\n\n");
				for(i=0;i<aptCount;i++){
					printf("%i. %s\n",i+1,nameA[i]);
				}//end of for 
				printf("\nEnter an Apartment Number that you like to see :");
				scanf("%i",&num1);
				flush;
			}while(num1>aptCount);
		}//end of if 

		getNum=num1-1;
		pause;

		for(i=0;i<aptInfo[getNum].keepCount;i++){
			rentAve=rentAve+aptInfo[getNum].listings[i].rent;
			closeAve=closeAve+aptInfo[getNum].listings[i].closeSell;
		}//end of for

		aveTotal=rentAve/aptInfo[getNum].keepCount;
		closeTotal=closeAve/aptInfo[getNum].keepCount;
		//aptCalcEach(aptInfo,aptCount,rent,close,&rentAverageF,&closeAverageF);// go to the function 
		for(i=0;i<aptInfo[getNum].keepCount;i++){
			rent[count]=aptInfo[getNum].listings[i].rent-aveTotal;
			close[count]=aptInfo[getNum].listings[i].closeSell-closeTotal;
			count++;
		}//end of for 
		cls;
		printf("APT\tROOM\tRENT\tCS\trent+/-\tClse+/-\n");
		printf("---\t----\t----\t\--\t\-------\t-------\n");

		for(i=0;i<aptInfo[getNum].keepCount;i++){
			printf("%s\t%i\t%i\t%i\t%i\t%i\t\n",nameA[getNum],aptInfo[getNum].listings[i].roomNum,aptInfo[getNum].listings[i].rent,
				aptInfo[getNum].listings[i].closeSell,rent[xa],close[xa]);
			xa++;
		}//end of for

		printf("The average rent %s is %i\n\n",nameA[getNum],aveTotal);
		printf("The average close sell rent is %i\n\n",closeTotal);
	}//end of big else 
}//end of displayEeachApt

void changeRate(double *inflation,APTINFO aptInfo[],APTINFO houseInfo[],int aptCount,int houseCount,double *inflationRate,int *flag2,int flagApt){

	int choice;
	int result = 0, i =0, j =0;
	char menuArray[4][80] = {'/0'};
	double getInflation=0.0;

	for (j=0; j<3; j++)
	{
		for (i=0; i<35; i++)
		{
			menuArray[j][i]= 205;
		}//end inside for loop
	}//end outside for loop
	menuArray[0][0]= 213;
	menuArray[0][35]= 184;
	menuArray[1][0]=198;
	menuArray[1][35]=181;
	menuArray[2][0]= 212;
	menuArray[2][35]=190;
	menuArray[3][0]=179;
	cls;
	printf("\t\t%s\n", menuArray[0]);
	printf("\t\t%c      Current Inflation Rate      %c\n", menuArray[3][0], menuArray[3][0]);
	printf("\t\t%c                                  %c\n", menuArray[3][0], menuArray[3][0]);
	printf("\t\t%c               %.2lf%c              %c\n", menuArray[3][0],*inflation ,'%',menuArray[3][0]);
	printf("\t\t%c                                  %c\n", menuArray[3][0], menuArray[3][0]);
	printf("\t\t%s\n", menuArray[2]);

	if(flagApt != 1){
		printf("\n\t\tOops! We don't have Apt info yet.\n\n\n");

	}
	else{
	printf("\n\n		1. Change the Inflation Rate\n");
	printf("		2. Go Back to the Main Menu\n");
	printf("\n		Choice :");
	scanf("%i",&choice);
	flush;
	switch(choice){
	case 1:
		cahngeInflation(inflation,aptInfo,houseInfo,aptCount,houseCount,&getInflation,inflationRate,flag2);
		
		break;

	}//end of sweitch
	}//end of else
}//end of changeRate

void cahngeInflation(double *inflation,APTINFO aptInfo[],APTINFO houseInfo[],int aptCount,int houseCount,double *getInflation,double *inflationRate,int *flag2){
	
	int result = 0, i =0, j =0;
	char menuArray[4][80] = {'/0'};
	double getInflationRate=1.0;//temp for inflation rate
	double getNum;

	cls;
	for (j=0; j<3; j++)
	{
		for (i=0; i<35; i++)
		{
			menuArray[j][i]= 205;
		}//end inside for loop
	}//end outside for loop
	menuArray[0][0]= 213;
	menuArray[0][35]= 184;
	menuArray[1][0]=198;
	menuArray[1][35]=181;
	menuArray[2][0]= 212;
	menuArray[2][35]=190;
	menuArray[3][0]=179;

	*getInflation=*inflation;

	if(*flag2 == 1){
	getInflationRate=*inflationRate;
	}//end of if 

	printf("\t\t%s\n", menuArray[0]);
	printf("\t\t%c      Current Inflation Rate      %c\n", menuArray[3][0], menuArray[3][0]);
	printf("\t\t%c                                  %c\n", menuArray[3][0], menuArray[3][0]);
	printf("\t\t%c               %.2lf%c              %c\n", menuArray[3][0],*inflation ,'%',menuArray[3][0]);
	printf("\t\t%c                                  %c\n", menuArray[3][0], menuArray[3][0]);
	printf("\t\t%s\n", menuArray[2]);
	printf("\n\t\tEnter Inflation Rate :");
	scanf("%lf",inflation);

	//(condition)?if true: if false;
	//ternary operator 
	
	for(i=0;i<aptCount;i++){
			for(j=0;j<aptInfo[i].keepCount;j++){

				aptInfo[i].listings[j].rent=(aptInfo[i].listings[j].rent)/getInflationRate; // getInflationRate is getting 0
			    aptInfo[i].listings[j].closeSell=(aptInfo[i].listings[j].closeSell)/getInflationRate;

			}//end of for 
		}//end of for

	if(*getInflation>*inflation){
		getNum=*getInflation-*inflation;
		printf("%.2lf%c inflation rate declease\n",getNum,'%');
		pause;
		
	}//end of if 

	else{
		// getInflation<inflation
		getNum=*inflation-*getInflation;
		printf("%.2lf%c Inflation rate inclease\n",getNum,'%');
		
		pause;
	}//end of else
	
	*inflationRate= 1+(*inflation/100);

	for(i=0;i<aptCount;i++){
		for(j=0;j<aptInfo[i].keepCount;j++){

			aptInfo[i].listings[j].rent=*inflationRate*(aptInfo[i].listings[j].rent);
			aptInfo[i].listings[j].closeSell=*inflationRate*(aptInfo[i].listings[j].closeSell);

		}//end of for 
	}//end of for 
	printf("\t\n\nHit Any Keys To Apply The Change!\n\n\n");

	*flag2 = 1;
}//end of inflation

void sort(APTINFO aptInfo[],int *aptCount,char nameA[20][20],int rent[100],int close[100]){

	int choice=0;

	printf("Choose categoly You want to sort by\n");
	printf("1 . Rent\n");
	printf("2 . Close sell");
    scanf("%i",&choice);
	flush;
	 switch(choice){
			case 1:
				rentSort(aptInfo,aptCount,nameA,rent,close);
				break;
			case 2:
				closeSort(aptInfo,aptCount,nameA,rent,close);
				break;


	 }//end of choice

}//end of sort

void rentSort(APTINFO aptInfo[], int *aptCount,char nameA[20][20],int rent[100],int close[100]){
	int i=0,j,a;
	char tempName[20];
	LISTINFO *temp;
	temp = (LISTINFO*)calloc(1, sizeof(LISTINFO));
	cls;
	printf("Sorted by rentSort\n");
	pause;
	printf("\n	Now You can sell the result in the Display 'See Each Apt Info' \n\n  ");
	for(i=0;i<*aptCount;i++){ // This is for each array 

		for(a=0;a<aptInfo[i].keepCount-1;a++){ // arrays need to be swapped keepCount-1 times 

			for(j=0;j<aptInfo[i].keepCount-1;j++){

				if((aptInfo[i].listings[j].rent) > (aptInfo[i].listings[j+1].rent)){

					temp->rent=aptInfo[i].listings[j].rent;
					aptInfo[i].listings[j].rent = aptInfo[i].listings[j+1].rent;
					aptInfo[i].listings[j+1].rent = temp->rent;

					temp->closeSell = aptInfo[i].listings[j].closeSell;
					aptInfo[i].listings[j].closeSell = aptInfo[i].listings[j+1].closeSell;
					aptInfo[i].listings[j+1].closeSell = temp->closeSell;

					temp->roomNum = aptInfo[i].listings[j].roomNum;
					aptInfo[i].listings[j].roomNum =  aptInfo[i].listings[j+1].roomNum;
					aptInfo[i].listings[j+1].roomNum = temp->roomNum;
				}//end of if 

			}//end of for
		}//end of outer for
	}//end of for 
	
}//end of rentSort

void closeSort(APTINFO aptInfo[], int *aptCount,char nameA[20][20],int rent[100],int close[100]){

	int i=0,j,a;
	char tempName[20];
	LISTINFO *temp;
	temp = (LISTINFO*)calloc(1, sizeof(LISTINFO));
	cls;
	printf("Sorted by Close sell\n");
	pause;
	printf("\n	Now You can sell the result in the Display 'See Each Apt Info' \n\n  ");
	for(i=0;i<*aptCount;i++){ // This is for each array 

		for(a=0;a<aptInfo[i].keepCount-1;a++){ // arrays need to be swapped keepCount-1 times 

			for(j=0;j<aptInfo[i].keepCount-1;j++){

				if((aptInfo[i].listings[j].closeSell) > (aptInfo[i].listings[j+1].closeSell)){

					temp->rent=aptInfo[i].listings[j].rent;
					aptInfo[i].listings[j].rent = aptInfo[i].listings[j+1].rent;
					aptInfo[i].listings[j+1].rent = temp->rent;

					temp->closeSell = aptInfo[i].listings[j].closeSell;
					aptInfo[i].listings[j].closeSell = aptInfo[i].listings[j+1].closeSell;
					aptInfo[i].listings[j+1].closeSell = temp->closeSell;

					temp->roomNum = aptInfo[i].listings[j].roomNum;
					aptInfo[i].listings[j].roomNum =  aptInfo[i].listings[j+1].roomNum;
					aptInfo[i].listings[j+1].roomNum = temp->roomNum;
				}//end of if 
			}//end of for
		}//end of outer for
	}//end of for 


}//end of close sell 
